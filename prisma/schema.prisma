// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Course{
  id String @id @default(uuid())
  userId String
  title String @db.VarChar
  description String? @db.Text
  imageUrl String? @db.Text
  price Float?
  isPublished Boolean @default(false)

  categoryId String?
  category Category? @relation(fields: [categoryId], references: [id])
  chapters Chapter[]

  attachments Attachment[]
  purchases Purchases[]

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@index([categoryId])
}

model Category{
  id String @id @default(uuid())
  name String @unique
  courses Course[]
}

model Attachment{
  id String @id @default(uuid())
  name String
  url String @db.Text

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)


  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  @@index([courseId])
}

model Chapter{
  id String @id @default(uuid())
  title String
  description String? @db.Text
  videoUrl String? @db.Text
  position Int
  isPublished Boolean @default(false)
  isFree Boolean @default(false)

  muxData MuxData?

  courseId String

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@index([courseId])
}

model MuxData{
  id String @id @default(uuid())
  assetId String
  playbackId String
  chapterId String @unique
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress{
  id String @id @default(uuid())
  userId String
  chaperId String
  chaper Chapter @relation(fields: [chaperId], references: [id], onDelete: Cascade)

  isComplete Boolean @default(false)
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@index([chaperId])
  @@unique([userId, chaperId])
}

model Purchases{
  id String @id @default(uuid())
  userId String

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer{
  id String @id @default(uuid())
  userId String @unique

  stripeCustomerId String @unique
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}